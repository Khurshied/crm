@model HLGranite.Mvc.Models.Nisan

@{
    ViewBag.Title = "Create";

    HLGranite.Mvc.Models.hlgraniteEntities db = new HLGranite.Mvc.Models.hlgraniteEntities();
    HLGranite.Mvc.Models.User user = db.Users.Where(u => u.UserName.Equals(User.Identity.Name)).FirstOrDefault();
    bool isAdmin = false; // default is false
    bool isCustomer = true; // default is true
    string visibility = "";
    if (user != null)
    {
        isAdmin = user.IsAdmin;
        isCustomer = user.IsCustomer;
    }
    
    if(isCustomer)
    {
        visibility = "hidden";
    }
}

@Styles.Render("~/Content/themes/base/jquery-ui.css")
@Scripts.Render("~/Scripts/jquery-2.0.3.min.js")
@Scripts.Render("~/Scripts/jquery-ui-1.10.3.min.js")

@Styles.Render("~/Content/keyboard.css")
@Scripts.Render("~/Scripts/keyboard.js")
<script>

    function displayMuslimDate(muslim) {
        var splits = muslim.split('/');
        if (splits.length >= 3) {
            $("#MuslimDay").val(append(splits[1],2,"0"));
            $("#MuslimMonth option").each(function (i, option) {
                if (i == splits[0]) {
                    $(option).attr("selected", "selected");
                    return;
                }
            });
            $("#MuslimYear").val(splits[2]);
        }
    }

    function setMuslimDate(day, month, year) {
        if (day == null || month == null || year == null) {
            $("#Deathm").val("");
            return;
        }

        var splits = $("#Deathm").val().split('/');
        if (day > 0) splits[1] = append(day, 2, "0");
        if (month > 0) splits[0] = append(month, 2, "0");
        if (year > 0) splits[2] = year;
        $("#Deathm").val(splits[0] + "/" + splits[1] + "/" + splits[2]);
    }

    $(function () {

        $("#Death").datepicker({ dateFormat: "dd/mm/yy" });
        $("#DeathDP").datepicker({ dateFormat: "dd/mm/yy" });
        $("#DeathDP").change(function () {
            $("#Death").val(toUSDate($(this).val()));

            $.ajax({
                type: "POST",
                url: "/Nisan/Calendar",
                data: { 'date': $("#Death").val() },
                content: document.body,
                success: function (data) {
                    var muslim = $("#Muslim", data).val();
                    $("#Deathm").val(muslim);
                    displayMuslimDate(muslim);
                }
            });
        });

        $("#MuslimDay").change(function() {
            setMuslimDate($(this).val(), 0, 0);
        });
        $("#MuslimMonth").change(function () {
            setMuslimDate(0, $(this).val(), 0);
        });
        $("#MuslimYear").change(function () {
            setMuslimDate(0, 0, $(this).val());
        });

        $("#StockId").change(function () {
            var stockId = $(this).val();
            $.ajax({
                type: "GET",
                url: "/../Stock/Edit/" + stockId,
                content: document.body,
                success: function (data) {
                    var price = $("#Price", data).val();
                    $("#Price").val(price);
                }
            });
        });

        // http://www.ejawi.net/v3/index?e=converter
        $("#Rumi").change(function () {
            $.ajax({
                type: "POST",
                url: "/Nisan/Translate",
                data: {'Rumi': $(this).val()},
                content: document.body,
                success: function (data) {
                    var jawi = $("#Jawi", data).val();
                    $("#Jawi").val(jawi);
                }
            });
        });

    });
</script>

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Nisan</legend>
        
        <div class="group">
        <div class="editor-label @visibility">
            @Html.LabelFor(model => model.StatusId)
        </div>
        <div class="editor-field @visibility">
            @Html.DropDownList("StatusId", String.Empty)
            @Html.ValidationMessageFor(model => model.StatusId)
        </div>

        <div class="editor-label" @visibility>
            @Html.LabelFor(model => model.AssigneeId)
        </div>
        <div class="editor-field" @visibility>
            @Html.DropDownList("AssigneeId", String.Empty)
            @Html.ValidationMessageFor(model => model.AssigneeId)
        </div>
        </div>

        <div class="editor-label" @visibility>
            @Html.LabelFor(model => model.SoldToId)
        </div>
        <div class="editor-field" @visibility>
            @Html.DropDownList("SoldToId", String.Empty)
            @Html.ValidationMessageFor(model => model.SoldToId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.StockId)
        </div>
        <div class="editor-field">
            @Html.DropDownList("StockId", String.Empty)
            @Html.ValidationMessageFor(model => model.StockId)
        </div>

        @{
            if (isAdmin)
            {
                <div class="editor-label">
                    @Html.LabelFor(model => model.Price)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Price)
                    @Html.ValidationMessageFor(model => model.Price)
                </div>
            }
            else
            {
                @Html.HiddenFor(model => model.Price)
            }
        }

        <div class="editor-label">
            @Html.LabelFor(model => model.Rumi)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Rumi)
            @Html.ValidationMessageFor(model => model.Rumi)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Jawi)
        </div>
        <div class="editor-field">
            <!-- source http://www.ajaxblender.com/jquery-virtual-keyboard.html -->
            @Html.TextBoxFor(model => model.Jawi, "", new { @class = "keyboardInput" })
            @Html.ValidationMessageFor(model => model.Jawi)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Death)
        </div>
        <div class="editor-field">
            @Html.TextBox("DeathDP")
            @Html.HiddenFor(model => model.Death)
            @Html.ValidationMessageFor(model => model.Death)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Deathm)
        </div>
        <div class="editor-field">
            @Html.TextBox("MuslimDay")
            @Html.DropDownList("MuslimMonth")
            @Html.TextBox("MuslimYear")
            @Html.HiddenFor(model => model.Deathm)
            @Html.ValidationMessageFor(model => model.Deathm)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Remarks)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.Remarks)
            @Html.ValidationMessageFor(model => model.Remarks)
        </div>

        @Html.Partial("_ButtonPartial")
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}