@model HLGranite.Mvc.Models.Nisan

@{
    ViewBag.Title = "Edit";
    
    HLGranite.Mvc.Models.hlgraniteEntities db = new HLGranite.Mvc.Models.hlgraniteEntities();
    HLGranite.Mvc.Models.User user = db.Users.Where(u => u.UserName.Equals(User.Identity.Name)).FirstOrDefault();
    bool isAdmin = false;
    if (user != null)
    {
        isAdmin = user.IsAdmin;
    }
}

@Styles.Render("~/Content/themes/base/jquery-ui.css")
@Scripts.Render("~/Scripts/jquery-2.0.3.min.js")
@Scripts.Render("~/Scripts/jquery-ui-1.10.3.min.js")
<script>

    /**
     * Append target value with desired prefix.
     */
    function append(value, digit, needle) {
        var after = value.toString();
        while (after.length < digit) {
            after = needle + after;
        }

        return after;
    }

    /**
     * Convert date object to Malaysia format.
     */
    function toLocalDateFormat(date) {
        var output = date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();
        output += " ";

        var hour = date.getHours();
        var tt = "AM";
        if (date.getHours() > 12) {
            hour -= 12;
            tt = "PM";
        }

        output += append(hour,2,"0") + ":" + append(date.getMinutes(),2,"0") + ":" + append(date.getSeconds(),2,"0") + " " + tt;
        return output;
    }

    /**
     * Manually add up local timezone value.
     */
    function afterLocalTime(createdString) {
        var timestamp = Date.parse(createdString);
        var created = new Date(timestamp);

        var now = new Date();
        var timezone = now.getTimezoneOffset();
        var totalSeconds = timezone * 60 * 1000;// x seconds x 1000 milli seconds

        var localTimestamp = timestamp - totalSeconds;
        var localTime = new Date(localTimestamp);
        return toLocalDateFormat(localTime);
    }

    /**
     * Convert to US Dateformat for input use.
     */
    function toUSDate(dateString) {

        var dates = dateString.split("/");
        if (dates.length >= 3) {
            return dates[1] + "/" + dates[0] + "/" + dates[2];
        }

        return dateString;
    }

    $(function () {

        $("#Created").html(afterLocalTime($("#Created").html()));

        $("#Death").datepicker({ dateFormat: "dd/mm/yy" });
        $("#DeathDP").datepicker({ dateFormat: "dd/mm/yy" });
        $("#DeathDP").change(function () {
            $("#Death").val(toUSDate($(this).val()));
        });

        //$("#DeathDP").enabled = false;
        //$("#DeathDP").disabled = true;
        //$("#StockId").enabled = false;
        //$("#StockId").disabled = true;

        $("#StockId").change(function () {
            var stockId = $(this).val();
            $.ajax({
                type: "GET",
                url: "/../Stock/Edit/" + stockId,
                content: document.body,
                success: function (data) {
                    var price = $("#Price", data).val();
                    $("#Price").val(price);
                }
            });
        });
    });
</script>

<h2>Edit</h2>

@functions{
    public string toLocalDateFormat(DateTime? date)
    {
        string output = "";
        if (date != null)
        {
            if (date.Value.Hour > 0 && date.Value.Minute > 0)
                output = date.Value.ToString("dd/MM/yyyy hh:mm:ss tt");
            else
                output = date.Value.ToString("dd/MM/yyyy");
        }

        return output;
    }
}

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Nisan</legend>

        @Html.HiddenFor(model => model.Id)
        <div class="group">
            <div class="editor-label">
                @Html.LabelFor(model => model.StatusId, "Status")
            </div>
            <div class="editor-field">
                @Html.DropDownList("StatusId", String.Empty)
                @Html.ValidationMessageFor(model => model.StatusId)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Creator, "Creator")
            </div>
            <div class="editor-field">
                @Html.DisplayFor(model => model.Creator.DisplayName)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Creator, "Created")
            </div>
            <div class="editor-field">
                <span id="Created">@Model.Created</span>
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.AssigneeId, "Assignee")
            </div>
            <div class="editor-field">
                @Html.DropDownList("AssigneeId", String.Empty)
                @Html.ValidationMessageFor(model => model.AssigneeId)
            </div>
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.SoldToId, "SoldTo")
        </div>
        <div class="editor-field">
            @Html.DropDownList("SoldToId", String.Empty)
            @Html.ValidationMessageFor(model => model.SoldToId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.StockId, "Stock")
        </div>
        <div class="editor-field">
            @Html.DropDownList("StockId", String.Empty)
            @Html.ValidationMessageFor(model => model.StockId)
        </div>

        @{
            if(isAdmin)
            {
                <div class="editor-label">
                    @Html.LabelFor(model => model.Price)
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.Price, new { @Value = String.Format("{0:"+HLGranite.Mvc.MvcApplication.MONEY_FORMAT+"}", Model.Price), @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.Price)
                </div>
            }
        }

        <div class="editor-label">
            @Html.LabelFor(model => model.Rumi)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Rumi, new { @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.Rumi)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Jawi)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Jawi, new { @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.Jawi)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Death)
        </div>
        <div class="editor-field">
            @Html.TextBox("DeathDP", @toLocalDateFormat(Model.Death), new { @readonly = "readonly"})
            @Html.HiddenFor(model => model.Death)
            @Html.ValidationMessageFor(model => model.Death)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Deathm)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Deathm, new { @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.Deathm)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Remarks)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.Remarks, new {@readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.Remarks)
        </div>

        @Html.HiddenFor(model => model.WorkItemId)

        @Html.Partial("_ButtonPartial")
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
